name: 🔍 Pull Request Check

on:
  pull_request:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'

# Cancel previous runs for the same PR
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  FLUTTER_VERSION: '3.32.4'
  DENO_VERSION: '2.0.0'

jobs:
  # 快速检查 - 并行运行
  quick-checks:
    name: 🚀 Quick Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐦 Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        cache: true
    
    - name: 🦕 Setup Deno
      uses: denoland/setup-deno@v2
      with:
        deno-version: ${{ env.DENO_VERSION }}
    
    - name: 📦 Get Flutter dependencies
      run: flutter pub get
    
    - name: 🏗️ Build generated files
      run: flutter packages pub run build_runner build --delete-conflicting-outputs
    
    # 并行运行多个检查
    - name: 🔍 Analyze Flutter code
      run: flutter analyze --fatal-infos
    
    - name: 🧪 Check Deno code
      run: |
        cd backend
        deno check --unstable-temporal-api mod.ts
    
    - name: 📝 Check formatting
      run: |
        if ! flutter format --set-exit-if-changed lib/; then
          echo "❌ Flutter code is not properly formatted"
          echo "Run: flutter format lib/"
          exit 1
        fi
        
        if ! (cd backend && deno fmt --check); then
          echo "❌ Deno code is not properly formatted"
          echo "Run: cd backend && deno fmt"
          exit 1
        fi

  # 测试 - 基础测试
  tests:
    name: 🧪 Run Tests
    runs-on: ubuntu-latest
    needs: quick-checks
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐦 Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        cache: true
    
    - name: 🦕 Setup Deno
      uses: denoland/setup-deno@v2
      with:
        deno-version: ${{ env.DENO_VERSION }}
    
    - name: 📦 Get dependencies
      run: flutter pub get
    
    - name: 🏗️ Build generated files
      run: flutter packages pub run build_runner build --delete-conflicting-outputs
    
    - name: 🧪 Run Flutter tests
      run: flutter test --no-sound-null-safety
    
    - name: 🧪 Run Deno tests
      run: |
        cd backend
        deno test --allow-net --allow-read --allow-env

  # 构建检查 - 确保可以成功构建
  build-check:
    name: 🏗️ Build Check
    runs-on: ubuntu-latest
    needs: quick-checks
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐦 Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        cache: true
    
    - name: 📦 Get dependencies
      run: flutter pub get
    
    - name: 🏗️ Build generated files
      run: flutter packages pub run build_runner build --delete-conflicting-outputs
    
    - name: 🌐 Test web build
      run: flutter build web --release --no-tree-shake-icons
    
    - name: 📱 Test Android build (debug)
      run: flutter build apk --debug

  # PR信息收集
  pr-info:
    name: 📋 PR Information
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: 📊 Analyze PR changes
      run: |
        echo "## 📋 PR分析报告" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # 统计修改文件
        CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.sha }})
        FLUTTER_FILES=$(echo "$CHANGED_FILES" | grep -E '\.(dart)$' | wc -l || echo "0")
        DENO_FILES=$(echo "$CHANGED_FILES" | grep -E '\.(ts|js)$' | wc -l || echo "0")
        
        echo "### 📁 文件变更统计" >> $GITHUB_STEP_SUMMARY
        echo "- 🐦 Flutter文件: $FLUTTER_FILES" >> $GITHUB_STEP_SUMMARY
        echo "- 🦕 Deno文件: $DENO_FILES" >> $GITHUB_STEP_SUMMARY
        echo "- 📝 总文件数: $(echo "$CHANGED_FILES" | wc -l)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # 检查是否需要特殊关注
        if echo "$CHANGED_FILES" | grep -q "pubspec.yaml"; then
          echo "⚠️ **注意**: pubspec.yaml已修改，请确保依赖更新正确" >> $GITHUB_STEP_SUMMARY
        fi
        
        if echo "$CHANGED_FILES" | grep -q "deno.json"; then
          echo "⚠️ **注意**: deno.json已修改，请确保配置更新正确" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "### 🔍 变更文件列表" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        echo "$CHANGED_FILES" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY

  # 检查结果汇总
  pr-check-result:
    name: ✅ PR Check Result
    runs-on: ubuntu-latest
    needs: [quick-checks, tests, build-check, pr-info]
    if: always()
    
    steps:
    - name: 📊 Summary
      run: |
        echo "## 🎯 PR检查结果" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ needs.quick-checks.result }}" == "success" && "${{ needs.tests.result }}" == "success" && "${{ needs.build-check.result }}" == "success" ]]; then
          echo "✅ **所有检查通过！**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "该PR可以安全合并 🚀" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **存在问题需要修复**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "检查状态:" >> $GITHUB_STEP_SUMMARY
          echo "- 代码检查: ${{ needs.quick-checks.result == 'success' && '✅' || '❌' }}" >> $GITHUB_STEP_SUMMARY
          echo "- 测试: ${{ needs.tests.result == 'success' && '✅' || '❌' }}" >> $GITHUB_STEP_SUMMARY
          echo "- 构建: ${{ needs.build-check.result == 'success' && '✅' || '❌' }}" >> $GITHUB_STEP_SUMMARY
          exit 1
        fi 
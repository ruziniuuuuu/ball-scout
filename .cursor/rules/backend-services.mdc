---
description:
globs:
alwaysApply: false
---
# 后端服务开发标准 (Deno)

## 微服务架构

### 服务划分 (基于Deno)
- **新闻聚合服务**: 爬取和处理全球足球媒体
- **数据处理服务**: 高性能数据清洗和分析  
- **翻译服务**: 多语言翻译和内容优化
- **用户服务**: 用户管理、认证授权
- **社区服务**: 评论、圈子、互动功能
- **推送服务**: 消息推送和通知

### 数据源集成
参考SofaScore的数据获取模式:
- **官方API**: UEFA, FIFA, 各大联赛官方API
- **体育数据提供商**: Sportradar, Stats Perform
- **媒体API**: BBC Sport, ESPN, Sky Sports, Goal.com
- **社交媒体**: Twitter API (球员、俱乐部官方)

## Deno开发规范

### 项目结构
```
backend/
├── deno.json                 # Deno配置文件
├── deps.ts                   # 依赖管理
├── mod.ts                    # 主入口文件
├── services/
│   ├── news/                 # 新闻服务
│   ├── user/                 # 用户服务
│   ├── translation/          # 翻译服务
│   └── community/            # 社区服务
├── shared/
│   ├── types.ts              # 共享类型定义
│   ├── utils.ts              # 工具函数
│   └── db.ts                 # 数据库连接
└── tests/                    # 测试文件
```

### 核心依赖 (deps.ts)
```typescript
// Web框架
export { Application, Router } from "https://deno.land/x/oak@v12.6.1/mod.ts";

// 数据库
export { Client } from "https://deno.land/x/postgres@v0.17.0/mod.ts";
export { connect } from "https://deno.land/x/redis@v0.31.0/mod.ts";

// HTTP客户端
export { fetchWithTimeout } from "https://deno.land/x/fetch_with_timeout@v1.0.0/mod.ts";

// 验证和加密
export { create, verify } from "https://deno.land/x/djwt@v3.0.1/mod.ts";
export { hash, verify as verifyPassword } from "https://deno.land/x/bcrypt@v0.4.1/mod.ts";

// 工具库
export { z } from "https://deno.land/x/zod@v3.22.4/mod.ts";
export { load } from "https://deno.land/std@0.208.0/dotenv/mod.ts";
```

### API响应格式
```typescript
// 统一的API响应格式
interface ApiResponse<T> {
  success: boolean;
  data?: T;
  error?: {
    code: string;
    message: string;
  };
  meta?: {
    page?: number;
    total?: number;
    timestamp: string;
  };
}

// 统一的错误处理
class ServiceError extends Error {
  constructor(
    public code: string,
    message: string,
    public statusCode: number = 500
  ) {
    super(message);
  }
}
```

### Deno配置文件 (deno.json)
```json
{
  "compilerOptions": {
    "allowJs": true,
    "lib": ["deno.window"],
    "strict": true
  },
  "fmt": {
    "files": {
      "include": ["src/"],
      "exclude": ["src/testdata/"]
    },
    "options": {
      "useTabs": false,
      "lineWidth": 80,
      "indentWidth": 2,
      "singleQuote": true
    }
  },
  "lint": {
    "files": {
      "include": ["src/"],
      "exclude": ["src/testdata/"]
    },
    "rules": {
      "tags": ["recommended"]
    }
  },
  "test": {
    "files": {
      "include": ["src/"],
      "exclude": ["src/testdata/"]
    }
  },
  "tasks": {
    "dev": "deno run --allow-net --allow-read --allow-env --watch mod.ts",
    "test": "deno test --allow-net --allow-read --allow-env",
    "fmt": "deno fmt",
    "lint": "deno lint"
  },
  "imports": {
    "@std/": "https://deno.land/std@0.208.0/",
    "@oak/": "https://deno.land/x/oak@v12.6.1/"
  }
}
```

### 数据库操作示例
```typescript
// 数据库连接
import { Client } from "./deps.ts";

class DatabaseService {
  private client: Client;

  constructor() {
    this.client = new Client({
      user: Deno.env.get("DB_USER"),
      password: Deno.env.get("DB_PASSWORD"),
      database: Deno.env.get("DB_NAME"),
      hostname: Deno.env.get("DB_HOST"),
      port: parseInt(Deno.env.get("DB_PORT") || "5432"),
    });
  }

  async connect() {
    await this.client.connect();
  }

  async disconnect() {
    await this.client.end();
  }
}
```

### 服务示例 (新闻服务)
```typescript
import { Router } from "./deps.ts";
import { ApiResponse } from "../shared/types.ts";

const newsRouter = new Router();

newsRouter.get("/api/v1/news", async (ctx) => {
  try {
    const { page = 1, limit = 20, category } = ctx.request.url.searchParams;
    
    // 获取新闻数据逻辑
    const news = await getNews({
      page: parseInt(page),
      limit: parseInt(limit),
      category
    });

    const response: ApiResponse<any[]> = {
      success: true,
      data: news.items,
      meta: {
        page: parseInt(page),
        total: news.total,
        timestamp: new Date().toISOString()
      }
    };

    ctx.response.body = response;
  } catch (error) {
    ctx.response.status = 500;
    ctx.response.body = {
      success: false,
      error: {
        code: "INTERNAL_ERROR",
        message: error.message
      }
    };
  }
});

export { newsRouter };
```

## 数据库设计
```sql
-- 核心表结构
CREATE TABLE news_articles (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  title VARCHAR(500) NOT NULL,
  content TEXT,
  source VARCHAR(100),
  author VARCHAR(100),
  published_at TIMESTAMP,
  category VARCHAR(50),
  language VARCHAR(10),
  translation_zh TEXT,
  sentiment_score DECIMAL(3,2),
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW()
);

CREATE TABLE teams (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  name VARCHAR(100) NOT NULL,
  league VARCHAR(100),
  country VARCHAR(50),
  logo_url VARCHAR(500),
  created_at TIMESTAMP DEFAULT NOW()
);
```

## API设计原则
- RESTful API设计
- 统一的命名规范: `/api/v1/resource`
- 支持分页: `?page=1&limit=20`
- 支持过滤: `?category=transfer&team_id=123`
- 响应时间 < 500ms
- 支持缓存策略
- 使用Deno的原生Web标准API

## 开发和部署
```bash
# 开发环境启动
deno task dev

# 运行测试
deno task test

# 代码格式化
deno task fmt

# 代码检查
deno task lint

# 生产环境运行
deno run --allow-net --allow-read --allow-env mod.ts
```

## Docker部署
```dockerfile
FROM denoland/deno:1.38.0

WORKDIR /app
COPY deps.ts .
RUN deno cache deps.ts

COPY . .
RUN deno cache mod.ts

EXPOSE 8000
CMD ["run", "--allow-net", "--allow-read", "--allow-env", "mod.ts"]
```

## 监控和日志
- 使用 Deno 原生的性能监控 API
- 结构化日志记录
- 健康检查端点
- 错误率和延迟监控
